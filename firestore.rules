/**
 * @description This ruleset enforces a public read, owner-write model for courses. All users can view course information,
 *              but only authenticated users can create, modify, or delete courses.  Videos are secured with public read access.
 * @dataStructure
 *   /courses/{courseId} (Course): Stores course metadata.
 *   /courses/{courseId}/videos/{videoId} (Video): Stores video metadata for a specific course.
 * @keySecurityDecisions
 *   - Unauthenticated listing of courses is permitted.
 *   - Only authenticated users can create, update or delete a course.
 *   - Anyone can read videos.
 * @denormalizationForAuthorization None required
 * @structuralSegregation Public read, protected write
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read courses, but only authenticated users to create, update, or delete them.
     * @path /courses/{courseId}
     * @allow (get, list): Any user can read course data.
     * @allow (create): Only authenticated users can create courses.
     * @allow (update, delete): Only authenticated users can update or delete existing courses.
     * @deny (create): Unauthenticated users cannot create courses.
     * @deny (update, delete): Unauthenticated users cannot update or delete courses.
     * @principle Public read, protected write.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read video metadata.
     * @path /courses/{courseId}/videos/{videoId}
     * @allow (get, list): Any user can read video data.
     * @deny (create, update, delete): No one can create, update or delete videos.
     * @principle Public read.
     */
    match /courses/{courseId}/videos/{videoId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}