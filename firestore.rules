/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset is in prototyping mode. It prioritizes strict authorization
 *  while relaxing data validation to allow for rapid schema iteration. All write
 *  operations are locked down to prevent unauthorized modifications, but minimal
 *  data validation is performed.
 * @data_structure
 *  - /courses/{courseId}: Stores course metadata.
 *  - /courses/{courseId}/videos/{videoId}: Stores video metadata for a specific course.
 * @key_security_decisions
 *  - All write operations require authentication.
 *  - No user listing is allowed.
 *  - Public read access is enabled for courses and videos.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read courses, but restricts write access to authenticated users.
     * @path /courses/{courseId}
     * @allow (get, list)
     * @deny (create, update, delete) - No unauthenticated access.
     * @principle Allows public reads but requires authentication for any modification.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read videos, but restricts write access to authenticated users.
     * @path /courses/{courseId}/videos/{videoId}
     * @allow (get, list)
     * @deny (create, update, delete) - No unauthenticated access.
     * @principle Allows public reads but requires authentication for any modification.
     */
    match /courses/{courseId}/videos/{videoId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }
  }
}